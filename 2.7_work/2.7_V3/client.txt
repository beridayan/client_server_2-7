import socket
import protocol

IP = "192.168.56.1"
PORT = 1234

CLIENT_IMAGE_PATH = r"C:\Users\user\Desktop\screenshot.png"
def handle_server_response(my_socket, cmd):
    if cmd.startswith("SEND_PHOTO"):
        # Receive the length of the length of the image
        length_image = int(my_socket.recv(4).decode())

        # Receive the actual length of the image
        images_length = int(my_socket.recv(length_image).decode())

        # Open the file to write binary content
        with open(CLIENT_IMAGE_PATH, "wb") as image:
            image_content = my_socket.recv(images_length)  # Receive image content
            image.write(image_content)

        print(f"Screenshot received and saved to {CLIENT_IMAGE_PATH}")
    else:
        # Handle other responses
        response = my_socket.recv(1024).decode()
        print("Server response:", response)
def sendname(my_socket):
    name = input("Enter username: ")
    my_socket.send(name.encode())

def main():
    # open socket with the server
    my_socket = socket.socket()
    my_socket.connect((IP, PORT))
    sendname(my_socket)
    # print instructions
    print('Welcome to remote computer application. Available commands are:\n')
    print('TAKE_SCREENSHOT\nSEND_PHOTO\nDIR\nDELETE\nCOPY\nEXECUTE\nEXIT')

    # loop until user requested to exit
    while True:
        cmd = input("Please enter command:\n")
        if protocol.check_cmd(cmd):
            packet = protocol.create_msg(cmd)
            my_socket.send(packet)
            handle_server_response(my_socket, cmd)
            if cmd == 'EXIT':
                break
        else:
            print("Not a valid command, or missing parameters\n")

    my_socket.close()

if __name__ == '__main__':
    main()
